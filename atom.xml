<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://GMH2003.github.io</id>
    <title>G_M_H博客</title>
    <updated>2021-07-05T06:39:57.640Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://GMH2003.github.io"/>
    <link rel="self" href="https://GMH2003.github.io/atom.xml"/>
    <subtitle>末日时在做什么？有没有空？可以来拯救吗？</subtitle>
    <logo>https://GMH2003.github.io/images/avatar.png</logo>
    <icon>https://GMH2003.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, G_M_H博客</rights>
    <entry>
        <title type="html"><![CDATA[Linux的故事]]></title>
        <id>https://GMH2003.github.io/post/linux-de-gu-shi/</id>
        <link href="https://GMH2003.github.io/post/linux-de-gu-shi/">
        </link>
        <updated>2020-03-24T01:30:05.000Z</updated>
        <content type="html"><![CDATA[<h1 id="什么是linux">什么是Linux</h1>
<p>Linux是一种自由和开放源码的类UNIX操作系统。该操作系统的内核由林纳斯·托瓦兹在1991年10月5日首次发布，在加上用户空间的应用程序之后，成为Linux操作系统。Linux也是自由软件和开放源代码软件发展中最著名的例子。只要遵循GNU 通用公共许可证（GPL），任何个人和机构都可以自由地使用Linux的所有底层源代码，也可以自由地修改和再发布。大多数Linux系统还包括像提供GUI的X Window之类的程序。除了一部分专家之外，大多数人都是直接使用Linux 发行版，而不是自己选择每一样组件或自行设置。</p>
<p>Linux严格来说是单指操作系统的内核，因操作系统中包含了许多用户图形接口和其他实用工具。如今Linux常用来指基于Linux的完整操作系统，内核则改以Linux内核称之。由于这些支持用户空间的系统工具和库主要由理查德·斯托曼于1983年发起的GNU计划提供，自由软件基金会提议将其组合系统命名为GNU/Linux，但Linux不属于GNU计划，这个名称并没有得到社群的一致认同。</p>
<p>Linux最初是作为支持英特尔x86架构的个人电脑的一个自由操作系统。当前Linux已经被移植到更多的计算机硬件平台，远远超出其他任何操作系统。Linux可以运行在服务器和其他大型平台之上，如大型计算机和超级计算机。世界上500个最快的超级计算机已100％运行Linux发行版或变种[9]。Linux也广泛应用在嵌入式系统上，如手机（Mobile Phone）、平板电脑（Tablet）、路由器（Router）、电视（TV）和电子游戏机等。在移动设备上广泛使用的Android操作系统就是创建在Linux内核之上。</p>
<p>通常情况下，Linux被打包成供个人计算机和服务器使用的Linux发行版，一些流行的主流Linux发布版，包括Debian（及其派生版本Ubuntu、Linux Mint）、Fedora（及其相关版本Red Hat Enterprise Linux、CentOS）和openSUSE等。Linux发行版包含Linux内核和支撑内核的实用程序和库，通常还带有大量可以满足各类需求的应用程序。个人计算机使用的Linux发行版通常包含X Window和一个相应的桌面环境，如GNOME或KDE。桌面Linux操作系统常用的应用程序，包括Firefox网页浏览器、LibreOffice办公软件、GIMP图像处理工具等。由于Linux是自由软件，任何人都可以创建一个符合自己需求的Linux发行版。<br>
PS:因为Linux是个开源项目，因此有很多人去维护，衍生出很多版本以及各种开源免费软件，有些甚至比付费软件的功能还要强大</p>
<h1 id="科普unix">科普UNIX</h1>
<p>UNIX操作系统（英语：UNIX），是美国AT&amp;T公司贝尔实验室于1969年完成的操作系统。最早由肯·汤普逊（Ken Thompson），丹尼斯·里奇（Dennis Ritchie），道格拉斯·麦克罗伊（Douglas McIlroy），和乔伊·欧桑纳于1969年在AT&amp;T贝尔实验室开发。于1971年首次发布，最初是完全用汇编语言编写。后来，在1973年用一个重要的开拓性的方法，Unix被丹尼斯·里奇用编程语言C（内核和I/O例外）重新编写。高级语言编写的操作系统具有更佳的兼容性，能更容易地移植到不同的计算机平台。<br>
MacOS就是一种UNIX操作系统</p>
<h1 id="linux的崛起">Linux的崛起</h1>
<blockquote>
<p>我是你可怕的恶梦<br>
------------Eric Raymond</p>
</blockquote>
<p>Eric Raymond，黑客，他写了一篇论文《大教堂与市集》，也写过一本书叫《unix编程艺术》。于是整个世界都改变了。<br>
纪录片《Revolution OS》描述，一次开发者大会，他遇到一个微软工程师，看见衣服上Microsoft的标志便询问对方：“你为微软工作？”当那位西装革履的工程师带有嘲讽和鄙视看着这个衣着普通的黑客回复：“是啊，你呢？”Raymond送去了一个微笑：我是你们可怕的恶梦。。。<br>
黑客是Microsoft的恶梦？不，不仅仅是，黑客是一切不自由的恶梦。电脑和网络，已经成为现代社会和文明不可或缺的产品。很多人电脑使用Microsoft的windows系统，而这些机器所访问的web页面。其背后的服务器系统却是Windows的死敌---Linux。相比Windows成为家喻户晓并家家都在使用的操作系统。Linux很少被普通人知道，但是这并不妨碍它的伟大。他们分别在桌面和服务器两个环境，各自称霸着世界。<br>
谈到Linux的起源，这个故事平凡却扣人心弦。1991那年，对于芬兰人绝对是一个有意思的一年。世界上首次全球通对话在诺基亚的Radiolinja网络中完成，诺基亚征服世界的脚步已经无法遏制。<br>
与此同时，阳光明媚的芬兰赫尔辛基大学的校园里，一个少年正好拥有了一台完全属于自己的电脑，不必再忍受学校机房漫长的等待。他当时对安德鲁·塔南鲍姆（Andrew Tanenbaum）的著作《操作系统：设计与实现》——一本Minix操作指南深深着迷。<br>
由于AT&amp;T对于Unix商业化，而后将Unix进行了闭源。Andrew所教授的课程《操作系统》却没有了“操作系统”。对此Andrew一咬牙，狠狠心，写出了一个兼容Unix的操作系统。人家就是厉害，你不给我使用，我自己写一个出来用。尽管Andrew的成果很简单，但是还是具备了Unix的基本功能，当然比较mini，因此命名为Minix。Minix作为Unix的变种，彼时的Minix正凭借低廉的价格和简易的操作在大学大行其道。<br>
Minix由于过于短小精悍，只能运行这一种机器，其他机器没有驱动。Andrew的学生就写了好多好用驱动来扩展Minix。可是，教授Andrew却觉得自己的操作系统要保持纯洁，不能有其他的代码来源。于是学生们就很郁闷，其中就有个叫Linus的同学。<br>
拥有自己的PC的Linus却不能将Minix运行在自己的电脑上。Linus也不得不走上了他无数前辈的道路，不让用，不给用，那就自己写一个操作系统来用。仅仅两个月后，一个“千疮百孔但却碰巧可以使用”的磁盘驱动程序和一个小到不能再小的文件系统就诞生了，这就是第0.01版的Linux。随后Linus将操作系统上传至FTP，并公布了全部源代码。在USENET讨论区，Linus阐述其初衷：在新操作系统中，“人们可以自己编写驱动程序，可以随意修改操作系统以适应不同需求，可以尝试在Minix上运行所有程序，这是Minix从未有过的美好一天。”<br>
美好的日子渐渐来临，Unix生态还是老样子，在商业的争斗中裹足不前。Microsoft和Apple的争斗也逐渐明朗，Microsoft靠卖软件大发特发。这让一个黑客很不满。<br>
理查德·斯托曼（Richard Stallman）登场，他认为所有软件都是人类智慧和思想的结晶。软件应该自由的让人们使用。1983年，Stallman发起了“GNU（GNU’s Not Unix的递归缩写）”计划，目的是创建一套完全自由的操作系统，以“重现软件界合作互助的团结精神”。他以“著佐权”（copyleft）标准为范本拟定了一份通用公用版权协议(General Public License，GPL)。与强调个人版权但限制自由传播的著作权（copyright）不同，GPL更强调公共版权和鼓励自由传播，它允许修改程序、复制软件和销售获利。但前提是公布修改后的全部源代码，必须保证自由思想的传递。GNU计划激发了软件界极大的热情，世界各地的软件奇才们纷纷参与其中。并且开发出包括文字编辑器Emacs、C语言编译器，gcc以及大部分UNIX系统程序库和工具在内的绝大多数软件，很多免费软件的水平甚至都已经超过了相应的付费版本。<br>
可是问题又来了，GNU编写了很多自由免费的软件，可是这些免费软件却运行在不自由的Unix上，这真是一个巨大的讽刺。Stallman承诺大家要两年内重新写一个操作系统，可是五年过去了，依然看不清成功的那一天。<br>
与前面很多故事一样，事情总是环环相扣，可是谁也不知道这环将会扣向哪一环。Stallman苦于没有操作系统，芬兰的那边，Linus只有一个操作系统内核而没有应用软件。<br>
于是，他们在各自的领域奋斗多年之后，命运终于安排他们走到了一起，Linus率领Linux加盟Stallman的GNU计划，上帝说要有光，于是牛顿出生了；人类需要自由，于是Linux与GUN结婚。这一“联姻”堪称是软件界的天作之合。<br>
1992年，在Linux Kernel平台上工作的开发者只有100位，平台中的核心代码只有几万行。如今，在平台上工作的开发者已经多达1000人，人员的背景也从最初的黑客扩散至更多的行业，平台中的核心代码则已经超过千万行。<br>
1998年，全球前500台超级计算机中还只有1台运行Linux。今天在全球前500台超级计算机中，有413台选用Linux。这些计算机遍布世界各地的多个行业，共同主宰着这个智慧的地球。<br>
大到航天科技，小到IC卡芯片，无不存在Linux的影子。在移动领域，Android来势汹汹，已经逾越IOS成为移动的王者，完成了对windows的完美复仇。<br>
Linux“可自由扩散”并不等同于“缺乏支持”和“业余水平”，恰恰相反，正是起开发的政策，让无数天才黑客参与进来，这是自由的胜利。<br>
就连商业软件公司也参与进来，这些公司技术雄厚又善于市场运作，开创了新的商业模式----销售服务而不是软件。使Linux从网络黑客和业余爱好者自娱自乐的工具，变成了一个具有全球影响力的软件帝国。<br>
98年的奥斯卡颁奖典礼上，当卡梅隆手握“最佳导演奖”的小金人，模仿《泰坦尼克》中的男主角Jack发出“我是世界之王”的宣言时，全世界无不为之倾倒。影片中那被重新描绘过的“唯美”海难，使人们惊叹于卡氏的神奇。但完美的电影也使人们忽略了另一个伟大事实：电影史上崭新的技术时代悄然来临。而这一时代，是由Linux开启的。<br>
从那时开始，梦工厂、迪斯尼、皮克斯等公司都逐渐将各自的工作平台转向Linux，无数伟大的银幕经典因此横空出世。从《魔戒》到《金刚》，从《哈利波特》到《霍比特人》，再从《指环王》到《阿凡达》，Linux几乎以一己之力缔造了无数人梦中的玄幻王国。也是从那时开始，Linux终将埋葬Microsoft就开始成为江湖中著名的传说之一。<br>
悠悠苍天，传来一股由弱变强的声音----- 我是你可怕的恶梦！！！</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[新博客通知]]></title>
        <id>https://GMH2003.github.io/post/xin-bo-ke-tong-zhi/</id>
        <link href="https://GMH2003.github.io/post/xin-bo-ke-tong-zhi/">
        </link>
        <updated>2020-03-09T01:37:15.000Z</updated>
        <content type="html"><![CDATA[<p>原来那个博客被我扔了，逃。</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[ Chtholly_tree]]></title>
        <id>https://GMH2003.github.io/post/chtholly_tree/</id>
        <link href="https://GMH2003.github.io/post/chtholly_tree/">
        </link>
        <updated>2019-11-12T04:39:35.000Z</updated>
        <content type="html"><![CDATA[<h2 id="神仙数据结构-chtholly_treeodt">神仙数据结构 Chtholly_tree（ODT）</h2>
<figure data-type="image" tabindex="1"><img src="https://pic.gmh-home.cf/pic/%E7%8F%82%E6%9C%B5%E8%8E%894.jpg" alt="" loading="lazy"></figure>
<h3 id="我永远喜欢珂朵莉">我永远喜欢珂朵莉</h3>
<h3 id="chtholly_tree简介">Chtholly_tree简介</h3>
<p>这是一种很暴力的数据结构（只是暴力，但不黄），基于<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mtext mathvariant="monospace">STLset</mtext></mrow><annotation encoding="application/x-tex">\texttt{STLset}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.61111em;vertical-align:0em;"></span><span class="mord text"><span class="mord texttt">STLset</span></span></span></span></span><br>
主要用于骗分，可以很好地适应随机数据。<br>
有时可以碾压分块和线段树。</p>
<h4 id="代码集合">代码集合</h4>
<pre><code class="language-cpp">#include&lt;set&gt;
#include&lt;vector&gt;
#include&lt;cstdio&gt;
#include&lt;utility&gt;
#include&lt;algorithm&gt;

#define ODT Chtholly_tree

#define LL long long

using namespace std;

struct Chtholly_tree {
	int ll,rr;
	mutable LL val;
	Chtholly_tree(int L,int R=-1,LL V=0): ll(L), rr(R), val(V) {}
	bool operator &lt; (const Chtholly_tree&amp; tt)const {
		return ll&lt;tt.ll;
	}
};

set&lt;ODT&gt; odt;
set&lt;ODT&gt;::iterator split(int pos) {
	set&lt;ODT&gt;::iterator it=odt.lower_bound(ODT(pos));
	if (it!=odt.end()&amp;&amp;it-&gt;ll==pos) return it;
	--it;
	ODT tmp=*it;
	odt.erase(it);
	odt.insert(ODT(tmp.ll,pos-1,tmp.val));
	return odt.insert(ODT(pos, tmp.rr, tmp.val)).first;
}
void assign(int l,int r,LL val) {
	set&lt;ODT&gt;::iterator itr=split(r+1), itl=split(l);
	odt.erase(itl,itr);
	odt.insert(ODT(l,r,val));
}
void add(int l,int r,LL val) {
	set&lt;ODT&gt;::iterator itr=split(r+1),itl=split(l);
	for(set&lt;ODT&gt;::iterator it=itl; it!=itr; it++) it-&gt;val+=val;
}
LL sum(int l, int r) {
	set&lt;ODT&gt;::iterator itr=split(r + 1),itl=split(l);
	LL res=0;
	for(set&lt;ODT&gt;::iterator it=itl; it!=itr;it++) res+=(it-&gt;rr-it-&gt;ll+1)*it-&gt;val;
	return res;
}
LL rank(int l, int r, int k){
    vector&lt;pair&lt;LL, int&gt; &gt;vec(0);
    set&lt;ODT&gt;::iterator itr=split(r+1),itl=split(l);
    for(set&lt;ODT&gt;::iterator it=itl;it!=itr;it++)vec.push_back(make_pair(it-&gt;val,it-&gt;rr-it-&gt;ll+1));
    sort(vec.begin(),vec.end());
    for (vector&lt;pair&lt;LL,int&gt; &gt;::iterator it=vec.begin();it!=vec.end();it++) if((k-=it-&gt;second)&lt;=0) return it-&gt;first;
    return -1; //note:if there are negative numbers, return another impossible number.
}
int main() {
}

</code></pre>
<h4 id="例题">例题：</h4>
<p><a href="https://www.luogu.org/problemnew/show/CF896C">CF896C Willem, Chtholly and Seniorious</a><br>
<a href="https://www.luogu.org/problem/CF915E">CF915E Physical Education Lessons</a><br>
<a href="https://www.luogu.org/problem/P2787">P2787 语文1（chin1）- 理理思维</a></p>
<h4 id="标程">标程：</h4>
<p>CF915E</p>
<pre><code class="language-cpp">//by     G_M_H      2019 11 12
//优化常数，将sum加到assign中，组成assign_new
#include&lt;set&gt;
#include&lt;vector&gt;
#include&lt;cstdio&gt;
#include&lt;utility&gt;
#include&lt;algorithm&gt;

#define ODT Chtholly_tree

#define LL long long

using namespace std;

struct Chtholly_tree {
	int ll,rr;
	mutable LL val;
	Chtholly_tree(int L,int R=-1,LL V=0): ll(L), rr(R), val(V) {}
	bool operator &lt; (const Chtholly_tree&amp; tt)const {
		return ll&lt;tt.ll;
	}
};

set&lt;ODT&gt; odt;
LL ans=0;
set&lt;ODT&gt;::iterator split(int pos) {
	set&lt;ODT&gt;::iterator it=odt.lower_bound(ODT(pos));
	if (it!=odt.end()&amp;&amp;it-&gt;ll==pos) return it;
	--it;
	ODT tmp=*it;
	odt.erase(it);
	odt.insert(ODT(tmp.ll,pos-1,tmp.val));
	return odt.insert(ODT(pos, tmp.rr, tmp.val)).first;
}
void assign(int l,int r,LL val) {
	set&lt;ODT&gt;::iterator itr=split(r+1), itl=split(l);
	odt.erase(itl,itr);
	odt.insert(ODT(l,r,val));
}
void assign_new(int l,int r,LL val) {
	set&lt;ODT&gt;::iterator itr=split(r+1), itl=split(l);
	for(set&lt;ODT&gt;::iterator it=itl;it!=itr;it++) ans-=it-&gt;val*(it-&gt;rr-it-&gt;ll+1);
	odt.erase(itl,itr);
	odt.insert(ODT(l,r,val));
	ans+=val*(r-l+1);
}
void add(int l,int r,LL val) {
	set&lt;ODT&gt;::iterator itr=split(r+1),itl=split(l);
	for(set&lt;ODT&gt;::iterator it=itl; it!=itr; it++) it-&gt;val+=val;
}
LL sum(int l,int r) {
	set&lt;ODT&gt;::iterator itr=split(r+1),itl=split(l);
	LL res=0;
	for(set&lt;ODT&gt;::iterator it=itl; it!=itr;it++) res+=(it-&gt;rr-it-&gt;ll+1)*it-&gt;val;
	return res;
}
LL rank(int l, int r, int k){
    vector&lt;pair&lt;LL, int&gt; &gt;vec(0);
    set&lt;ODT&gt;::iterator itr=split(r+1),itl=split(l);
    for(set&lt;ODT&gt;::iterator it=itl;it!=itr;it++)vec.push_back(make_pair(it-&gt;val,it-&gt;rr-it-&gt;ll+1));
    sort(vec.begin(),vec.end());
    for (vector&lt;pair&lt;LL,int&gt; &gt;::iterator it=vec.begin();it!=vec.end();it++) if((k-=it-&gt;second)&lt;=0) return it-&gt;first;
    return -1; //note:if there are negative numbers, return another impossible number.
}
int n,m,l,r,op;
int main() {
	scanf(&quot;%d%d&quot;,&amp;n,&amp;m);
	odt.insert(ODT(1,n,1));
	ans=n;
	while(m--) {
		scanf(&quot;%d%d%d&quot;,&amp;l,&amp;r,&amp;op);
		if(op==1) assign_new(l,r,0);
		else assign_new(l,r,1);
		printf(&quot;%d\n&quot;,ans);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[CSP2019爆零暨退役游记]]></title>
        <id>https://GMH2003.github.io/post/2019-10-25-csp爆炸记.markd/</id>
        <link href="https://GMH2003.github.io/post/2019-10-25-csp爆炸记.markd/">
        </link>
        <updated>2019-10-25T21:07:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="资料下载">资料下载</h2>
<p><a href="/downloads/%E6%8F%90%E9%AB%98%E7%BB%84C++%EF%BC%88CSP2019-senior-C++-A%EF%BC%89.pdf">试题</a></p>
<p><a href="/downloads/CSP2019-senior-%E5%8F%82%E8%80%83%E7%AD%94%E6%A1%88-A.docx">答案</a></p>
<p>谨以此纪念我的oi生涯。</p>
<h2 id="day0">day0</h2>
<p>晚上XY发表重要讲话，保送名额一个都没有。<s>预示要凉</s></p>
<h2 id="day1">day1</h2>
<p>早晨6:00起床，本以为在家会睡得好一点<s>确实好一点，在学校会有一堆延迟熄灯的人。。。</s>，然而还是头晕。<br>
准时到校，坐校车，我们被分到和西溪高三一起坐，我右前方是zzy和zrf，%%%，只见他们在打雀魂。。。果然是队爷、稳过。</p>
<p>大概9:00不到到了浙江工商大学。</p>
<p>9:30开始，不仅手机被收了，手表也被收了，看一眼试卷，40道选择题，除了最后一道博弈论，似乎都是SB题。开始做，很顺畅，写完两道阅读程序，感觉第三道有点毒瘤，先做完善程序，第一道拓扑排序，SB题，第二道状压博弈论，大概理解一下各种状态，瞎蒙一下，大概错个两道。做完后，悄悄的把答案搬运到准考证后面。11:30离场，监考收试卷收了老半天。</p>
<p>考完和wxh~~(不是王修涵)<s>讨论了一下，感觉要凉</s>预示要凉~~，无路径压缩的并查集的时间复杂度想的太多，cin无法读空串。不管，反正还有86分；</p>
<p>晚上标准答案一出，和试题对比，应该有71.5~~(疯狂暗示填涂出错)~~。</p>
<h2 id="day2">day2</h2>
<p>下午回校，班级集体过生日，隔壁班的人过来唱《凉凉》，感觉我要凉。。。</p>
<p>晚上考物理啥都不会，下周还要期中考。</p>
<h2 id="day3">day3</h2>
<p>上了，一天课，晚上不敢去机房，生怕凉凉。。</p>
<h2 id="day4">day4</h2>
<p>上课</p>
<h2 id="day5">day5</h2>
<p>晚上溜去机房，教练让我好好准备期中考。洛谷上表示ZJ分数线可能会有79.5。</p>
<h2 id="day6">day6</h2>
<p>上课，等待。</p>
<h2 id="day7">day7</h2>
<p>分数出来62.5,同年级倒一，退役。。。。</p>
<h2 id="退役小结">退役小结</h2>
<p>经历三年初赛没过，一方面<code>此生无悔入OI，但悔身为浙江人</code>，另一方面也是自己对初赛不够重视，客观方面确实有点发烧。</p>
<p>但我绝不后悔，</p>
<p>在以后的日子里，我会好好学习文化课，准备选考和高考，学习之前没学的数据结构，多打codeforces，为以后的ACM做准备，至于明年的CSP看情况吧。true</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[排序总结]]></title>
        <id>https://GMH2003.github.io/post/2019-10-11-排序总结.markd/</id>
        <link href="https://GMH2003.github.io/post/2019-10-11-排序总结.markd/">
        </link>
        <updated>2019-10-11T10:33:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="排序大法总结">排序大法总结</h2>
<p>这里的排序都是一些函数调用,默认为int类型,从小到大,第一个参数为头指针,第二个为数组长度.</p>
<h3 id="直接选择排序">直接选择排序</h3>
<p><img src="https://pic.gmh-home.cf/pic/%E9%80%89%E6%8B%A9%E6%8E%92%E5%BA%8F.gif" alt="" loading="lazy"><br>
时间复杂度为 <span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n^{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span><br>
是不稳定排序.</p>
<h4 id="思路">思路:</h4>
<p>每次选出待排区间的最值,放在第一个.</p>
<pre><code class="language-cpp">void selection_sort(int num[],int len){
	int minpos;
	for(register int i=0;i&lt;len;i++){
		minpos=i;
		for(register int j=i;j&lt;len;j++){
			if(num[minpos]&gt;num[j]) minpos=j;
		}
		swap(num[minpos],num[i]);
	}
	return ;
}
</code></pre>
<h3 id="冒泡排序">冒泡排序</h3>
<p><img src="https://pic.gmh-home.cf/pic/%E5%86%92%E6%B3%A1%E6%8E%92%E5%BA%8F.gif" alt="" loading="lazy"><br>
时间复杂度在最坏以及平均情况下下为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n^{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，最好情况下为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，是稳定排序.</p>
<h4 id="思路-2">思路:</h4>
<p>不断冒泡</p>
<pre><code class="language-cpp">void bubble_sort(int num[],int len){
	for(register int i=0;i&lt;len;i++){
		for(register int j=0;j&lt;len-i-1;j++){
			if(num[j]&gt;num[j+1]) swap(num[j],num[j+1]);
		}
	}
	return ;
}
</code></pre>
<h3 id="直接插入排序">直接插入排序</h3>
<p><img src="https://pic.gmh-home.cf/pic/%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F.gif" alt="" loading="lazy"><br>
平均时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n^2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span></p>
<pre><code class="language-cpp">void insert_sort(int num[],int len) {
	int v,j;
	for(register int i=1;i&lt;len;i++) {
		v=num[i];
		j=i-1;
		while(j&gt;=0&amp;&amp;v&lt;num[j]) {
			num[j+1]=num[j];
			j=j-1;
		}
		num[j+1]=v;
	}
}
</code></pre>
<h3 id="希尔排序">希尔排序</h3>
<p><img src="https://pic.gmh-home.cf/pic/%E5%B8%8C%E5%B0%94%E6%8E%92%E5%BA%8F.gif" alt="" loading="lazy"><br>
时间复杂度在平均情况下为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><msup><mi>n</mi><mn>1.3</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n^{1.3})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">.</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，在最好情况下为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，在最坏情况下为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n^{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，是不稳定排序</p>
<pre><code class="language-cpp">void shell_sort(int num[],int len) {
	int gap=len;
	while(gap&gt;1) {
		gap=gap/3+1;
		for(register int i=gap; i&lt;len; i++) {
			int temp=num[i];
			int pos=i-gap;
			while(pos&gt;=0) {
				if(temp&lt;num[pos]) swap(num[pos],num[pos+gap]);
				pos-=gap;
			}
		}
	}
	return ;
}
</code></pre>
<h3 id="快速排序">快速排序</h3>
<p><img src="https://pic.gmh-home.cf/pic/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F.gif" alt="" loading="lazy"><br>
时间平均复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，但是在极端情况下会退化<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><msup><mi>n</mi><mn>2</mn></msup><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(n^{2})</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span>，是不稳定排序。</p>
<pre><code class="language-cpp">void quick_sort(int num[],int len) {
	int i=0,j=len-1;
	int k=num[0];
	if(i&gt;=j) return;
	while(i&lt;j) {
		while((i&lt;j)&amp;&amp;num[j]&gt;=k) j--;
		swap(num[i],num[j]);
		while((i&lt;j)&amp;&amp;(num[i]&lt;k)) i++;
		swap(num[i],num[j]);
	}
	quick_sort(num,i-1);
	quick_sort(num+i+1,len-i-1);
	return;
}
</code></pre>
<h3 id="归并排序">归并排序</h3>
<p><img src="https://pic.gmh-home.cf/pic/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F.gif" alt="" loading="lazy"><br>
时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，是稳定排序。</p>
<pre><code class="language-cpp">void merge_sort(int num[],int len){
	if(len==1) return ;
	merge_sort(num,len&gt;&gt;1);
	merge_sort(num+(len&gt;&gt;1),len-(len&gt;&gt;1));
	int i=0,j=len&gt;&gt;1,pos=0,fuzhu[len];
	while(i&lt;(len&gt;&gt;1)&amp;&amp;j&lt;len) fuzhu[pos++]=(num[i]&lt;num[j])? num[i++]:num[j++];
	while(i&lt;(len&gt;&gt;1)) fuzhu[pos++]=num[i++];
	while(j&lt;len) fuzhu[pos++]=num[j++];
	for(register int p=0;p&lt;len;p++) num[p]=fuzhu[p];
	return ;
}
</code></pre>
<h3 id="堆排序">堆排序</h3>
<p><img src="https://pic.gmh-home.cf/pic/%E5%A0%86%E6%8E%92%E5%BA%8F.gif" alt="" loading="lazy"><br>
时间复杂度为<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi mathvariant="normal">Θ</mi><mo>(</mo><mi>n</mi><mi>l</mi><mi>o</mi><mi>g</mi><mi>n</mi><mo>)</mo></mrow><annotation encoding="application/x-tex">\Theta(nlogn)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">Θ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span>，是不稳定排序。</p>
<pre><code class="language-cpp">void heap_sort(int num[],int len) {
	int mid[len+1];
	for(register int i=1,pos; i&lt;=len; i++) {
		mid[i]=num[i-1];
		pos=i;
		while(pos!=1) {
			if(mid[pos]&lt;mid[pos&gt;&gt;1]) swap(mid[pos],mid[pos&gt;&gt;1]);
			else break;
			pos&gt;&gt;=1;
		}
	}
	for(register int i=1,pos,nex; i&lt;=len; i++) {
		num[i-1]=mid[1];
		mid[1]=mid[len-i+1];
		pos=1;
		while(pos&lt;&lt;1&lt;=len-i) {
			nex=pos&lt;&lt;1;
			if((mid[nex]&gt;mid[nex|1]&amp;&amp;nex&lt;len-i)) nex++;
			if(mid[pos]&lt;=mid[nex]) break;
			swap(mid[pos],mid[nex]);
			pos=nex;
		}
	}
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 洛谷 P2365 任务安排&&斜率优化学习]]></title>
        <id>https://GMH2003.github.io/post/2019-08-28-题解-洛谷-P2365-任务安排.markd/</id>
        <link href="https://GMH2003.github.io/post/2019-08-28-题解-洛谷-P2365-任务安排.markd/">
        </link>
        <updated>2019-08-28T22:22:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="https://www.luogu.org/problem/P2365">题目链接</a></h2>
<h2 id="题目描述">题目描述</h2>
<p>N个任务排成一个序列在一台机器上等待完成（顺序不得改变），这N个任务被分成若干批，每批包含相邻的若干任务。从时刻0开始，这些任务被分批加工，第i个任务单独完成所需的时间是Ti。在每批任务开始前，机器需要启动时间S，而完成这批任务所需的时间是各个任务需要时间的总和（同一批任务将在同一时刻完成）。每个任务的费用是它的完成时刻乘以一个费用系数Fi。请确定一个分组方案，使得总费用最小。</p>
<p>例如：S=1；T={1,3,4,2,1}；F={3,2,3,3,4}。如果分组方案是{1,2}、{3}、{4,5}，则完成时间分别为{5,5,10,14,14}，费用C={15,10,30,42,56}，总费用就是153。</p>
<h2 id="输入格式">输入格式</h2>
<p>第一行是N(1&lt;=N&lt;=5000)。</p>
<p>第二行是S(0&lt;=S&lt;=50)。</p>
<p>下面N行每行有一对数，分别为Ti和Fi，均为不大于100的正整数，表示第i个任务单独完成所需的时间是Ti及其费用系数Fi。</p>
<h2 id="输出格式">输出格式</h2>
<p>一个数，最小的总费用。</p>
<h2 id="输入输出样例">输入输出样例</h2>
<h3 id="输入">输入</h3>
<pre><code>5
1
1 3
3 2
4 3
2 3
1 4
</code></pre>
<h3 id="输出">输出</h3>
<pre><code>153
</code></pre>
<h2 id="code">code</h2>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#define LL long long
#define ULL unsigned LL
using namespace std;
template&lt;class T&gt;
inline void read(T&amp; p) {
	char c;
	p=0;
	bool f=0;
	for(c=getchar(); c&lt;'0'||c&gt;'9'; c=getchar())if(c=='-')f=true;
	for(; c&gt;='0'&amp;&amp;c&lt;='9'; c=getchar()) p=(p&lt;&lt;3)+(p&lt;&lt;1)+c-'0';
	if(f)p=-p;
}
template&lt;class T,class... Args&gt;
inline void read(T&amp; x,Args&amp;... args) {
	read(x);
	read(args...);
}
template&lt;class T&gt;
inline void write(T x) {
	if(x&lt;0) putchar('-'),x=-x;
	if(x&gt;9) write(x/10);
	putchar('0'+x%10);
}
template&lt;class T,class... Args&gt;
inline void write(T x,Args... args) {
	write(x);
	putchar(' ');
	write(args...);
}
template&lt;class... Args&gt;
inline void writeln(Args... args) {
	write(args...);
	putchar('\n');
}
template&lt;class T&gt;
inline T my_min(T a,T b){
	return (a&lt;b)? a:b;
}
const int N=5001;
LL dp[N],sumt[N],sumc[N];
int n,s;
int main(){
	read(n,s);
	for(register int i=1,t,c;i&lt;=n;i++){
		read(t,c);
		sumt[i]=sumt[i-1]+t;
		sumc[i]=sumc[i-1]+c;
		dp[i]=0x3f3f3f3f;
	}
	dp[0]=0;
	for(register int i=1;i&lt;=n;i++){
		for(register int j=0;j&lt;i;j++){
			dp[i]=my_min(dp[i],dp[j]+sumt[i]*(sumc[i]-sumc[j])+s*(sumc[n]-sumc[j]));
		}
	}
	write(dp[n]);
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 codeforces CF1200C Round Corridor]]></title>
        <id>https://GMH2003.github.io/post/2019-08-14-题解-codeforces-CF1200C.markd/</id>
        <link href="https://GMH2003.github.io/post/2019-08-14-题解-codeforces-CF1200C.markd/">
        </link>
        <updated>2019-08-14T20:02:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="http://codeforces.com/problemset/problem/1200/C">题目链接</a></h2>
<h2 id="题目">题目</h2>
<h2 id="c-round-corridor">C. Round Corridor</h2>
<ul>
<li>time limit per test1 second</li>
<li>memory limit per test256 megabytes</li>
<li>inputstandard input</li>
<li>outputstandard output</li>
</ul>
<p>Amugae is in a very large round corridor. The corridor consists of two areas. The inner area is equally divided by n sectors, and the outer area is equally divided by m sectors. A wall exists between each pair of sectors of same area (inner or outer), but there is no wall between the inner area and the outer area. A wall always exists at the 12 o'clock position.</p>
<figure data-type="image" tabindex="1"><img src="http://codeforces.com/predownloaded/9e/12/9e12655e7ea9e6bff7c9bb3bb0e768a502ecba75.png" alt="" loading="lazy"></figure>
<p>The inner area's sectors are denoted as (1,1),(1,2),…,(1,n) in clockwise direction. The outer area's sectors are denoted as (2,1),(2,2),…,(2,m) in the same manner. For a clear understanding, see the example image above.</p>
<p>Amugae wants to know if he can move from one sector to another sector. He has q questions.</p>
<p>For each question, check if he can move between two given sectors.</p>
<h3 id="input">Input</h3>
<p>The first line contains three integers n, m and q (1≤n,m≤1018, 1≤q≤104) — the number of sectors in the inner area, the number of sectors in the outer area and the number of questions.</p>
<p>Each of the next q lines contains four integers sx, sy, ex, ey (1≤sx,ex≤2; if sx=1, then 1≤sy≤n, otherwise 1≤sy≤m; constraints on ey are similar). Amague wants to know if it is possible to move from sector (sx,sy) to sector (ex,ey).</p>
<h3 id="output">Output</h3>
<p>For each question, print &quot;YES&quot; if Amugae can move from (sx,sy) to (ex,ey), and &quot;NO&quot; otherwise.</p>
<p>You can print each letter in any case (upper or lower).</p>
<h3 id="example">Example</h3>
<h4 id="input-2">input</h4>
<pre><code>4 6 3
1 1 2 3
2 6 1 2
2 6 2 4
</code></pre>
<h4 id="output-2">output</h4>
<pre><code>YES
NO
YES
</code></pre>
<h3 id="note">Note</h3>
<p>Example is shown on the picture in the statement.</p>
<h2 id="做题经历">做题经历</h2>
<p>我太蒟了，纯属瞎搞。</p>
<h2 id="思路分析">思路分析</h2>
<p>这是一道数学题；</p>
<p>用gcd求出有几个联通的区间，在求出起点和终点所在的区间。<br>
判断起点和终点是否在同一个区间。</p>
<h2 id="ac代码">AC代码</h2>
<pre><code class="language-cpp">#include&lt;cstdio&gt;
#include&lt;iostream&gt;
#define LL long long
using namespace std;
LL m,n,q;
LL gcd(LL a,LL b) {
	LL r;
	while(b) {r=a%b;a=b;b=r;}
	return a;
}
int main() {
	scanf(&quot;%lld%lld%lld&quot;,&amp;m,&amp;n,&amp;q);
	LL br=gcd(m,n);
	while(q--) {
		LL f1,f2,t1,t2,q1,q2;
		scanf(&quot;%lld%lld%lld%lld&quot;,&amp;f1,&amp;f2,&amp;t1,&amp;t2);
		q1=(f1==1)? ((f2-1)/(m/br)):((f2-1)/(n/br));
		q2=(t1==1)? ((t2-1)/(m/br)):((t2-1)/(n/br));
		if(q1==q2)printf(&quot;YES\n&quot;);
		else printf(&quot;NO\n&quot;);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 洛谷 P2596 [ZJOI2006]书架]]></title>
        <id>https://GMH2003.github.io/post/2019-08-11-题解-洛谷-P2596-[ZJOI2006]书架.markd/</id>
        <link href="https://GMH2003.github.io/post/2019-08-11-题解-洛谷-P2596-[ZJOI2006]书架.markd/">
        </link>
        <updated>2019-08-11T23:52:34.000Z</updated>
        <content type="html"><![CDATA[<h2 id="用vectoro2水过">用vector+O2水过。。。</h2>
<pre><code class="language-cpp">// luogu-judger-enable-o2
#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
using namespace std;
vector&lt;int&gt; v;
template&lt;typename T&gt;
inline void read(T&amp; p) {
	char c;
	p=0;
	bool f=0;
	for(c=getchar(); c&lt;'0'||c&gt;'9'; c=getchar())if(c=='-')f=true;
	for(; c&gt;='0'&amp;&amp;c&lt;='9'; c=getchar()) p=(p&lt;&lt;3)+(p&lt;&lt;1)+c-'0';
	if(f)p=-p;
}
template&lt;typename T,typename... Args&gt;
inline void read(T&amp; x,Args&amp;... args) {
	read(x);
	read(args...);
}
int n,m;
int main() {
	read(n,m);
	for(register int i=1,mid; i&lt;=n; i++) {
		read(mid);
		v.push_back(mid);
	}
	char op[100];
	for(register int i=1,x,y,tmp; i&lt;=m; i++) {
		scanf(&quot;%s&quot;,op);
		if(op[0]=='T') {
			read(x);
			v.erase(find(v.begin(),v.end(),x));
			v.insert(v.begin(),x);
		} else if(op[0]=='B') {
			read(x);
			v.erase(find(v.begin(),v.end(),x));
			v.insert(v.end(),x);
		} else if(op[0]=='I') {
			read(x,y);
			if(y!=0) {
				tmp=find(v.begin(),v.end(),x)-v.begin();
				v.erase(tmp+v.begin());
				tmp+=y;
				v.insert(v.begin()+tmp,x);
			}
		} else if(op[0]=='A') {
			read(x);
			tmp=find(v.begin(),v.end(),x)-v.begin();
			printf(&quot;%d\n&quot;,tmp);
		} else if(op[0]=='Q') {
			read(x);
			printf(&quot;%d\n&quot;,v[x-1]);
		}
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 codeforces CF1196B Odd Sum Segments]]></title>
        <id>https://GMH2003.github.io/post/2019-07-25-题解-codeforces-CF1196B.markd/</id>
        <link href="https://GMH2003.github.io/post/2019-07-25-题解-codeforces-CF1196B.markd/">
        </link>
        <updated>2019-07-25T22:02:04.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="http://codeforces.com/problemset/problem/1196/B">题目链接</a></h2>
<h2 id="题目">题目</h2>
<h2 id="b-odd-sum-segments">B. Odd Sum Segments</h2>
<ul>
<li>time limit per test3 seconds</li>
<li>memory limit per test256 megabytes</li>
<li>inputstandard input</li>
<li>outputstandard output</li>
</ul>
<p>You are given an array a consisting of n integers a1,a2,…,an. You want to split it into exactly k non-empty non-intersecting subsegments such that each subsegment has odd sum (i. e. for each subsegment, the sum of all elements that belong to this subsegment is odd). It is impossible to rearrange (shuffle) the elements of a given array. Each of the n elements of the array a must belong to exactly one of the k subsegments.</p>
<p>Let's see some examples of dividing the array of length 5 into 3 subsegments (not necessarily with odd sums): [1,2,3,4,5] is the initial array, then all possible ways to divide it into 3 non-empty non-intersecting subsegments are described below:</p>
<p>[1],[2],[3,4,5];<br>
[1],[2,3],[4,5];<br>
[1],[2,3,4],[5];<br>
[1,2],[3],[4,5];<br>
[1,2],[3,4],[5];<br>
[1,2,3],[4],[5].<br>
Of course, it can be impossible to divide the initial array into exactly k subsegments in such a way that each of them will have odd sum of elements. In this case print &quot;NO&quot;. Otherwise, print &quot;YES&quot; and any possible division of the array. See the output format for the detailed explanation.</p>
<p>You have to answer q independent queries.</p>
<h3 id="input">Input</h3>
<p>The first line contains one integer q (1≤q≤2⋅105) — the number of queries. Then q queries follow.</p>
<p>The first line of the query contains two integers n and k (1≤k≤n≤2⋅105) — the number of elements in the array and the number of subsegments, respectively.</p>
<p>The second line of the query contains n integers a1,a2,…,an (1≤ai≤109), where ai is the i-th element of a.</p>
<p>It is guaranteed that the sum of n over all queries does not exceed 2⋅105 (∑n≤2⋅105).</p>
<h3 id="output">Output</h3>
<p>For each query, print the answer to it. If it is impossible to divide the initial array into exactly k subsegments in such a way that each of them will have odd sum of elements, print &quot;NO&quot; in the first line. Otherwise, print &quot;YES&quot; in the first line and any possible division of the array in the second line. The division can be represented as k integers r1, r2, ..., rk such that 1≤r1&lt;r2&lt;⋯&lt;rk=n, where rj is the right border of the j-th segment (the index of the last element that belongs to the j-th segment), so the array is divided into subsegments [1;r1],[r1+1;r2],[r2+1,r3],…,[rk−1+1,n]. Note that rk is always n but you should print it anyway.</p>
<h3 id="example">Example</h3>
<h4 id="input-2">input</h4>
<pre><code>3
5 3
7 18 3 14 1
5 4
1 2 3 4 5
6 2
1 2 8 4 10 2
</code></pre>
<h4 id="output-2">output</h4>
<pre><code>YES
1 3 5
NO
NO
</code></pre>
<h2 id="分析及题解">分析及题解</h2>
<h3 id="做题经历">做题经历</h3>
<p>第一眼看到题目，爆搜？？？！！！<br>
第二眼看到题目，这是到大水题。</p>
<h3 id="题目分析">题目分析</h3>
<p>奇数+奇数=偶数；<br>
奇数+偶数=奇数；</p>
<p>既然是分组，使每组的和为奇数，那么就和偶数没什么关系了，只要统计奇数就行了。</p>
<p>先统计奇数的个数，如果奇数的个数小于k，那么直接输出NO。<br>
如果奇数的个数大于k，不妨把最后两个奇数合并成偶数（在同一组里）直到奇数的个数等于k，输出YES和解，否则也输出NO。</p>
<p>关于输出解，输出前k-1个奇数的位置，和n。</p>
<h3 id="代码附上">代码附上</h3>
<pre><code class="language-cpp">/*by G_M_H*/
#include&lt;cmath&gt;
#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;cstring&gt;
#include&lt;utility&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#define LL long long
using namespace std;
int line[200005];
int n,k;
int main() {
	int q;
	scanf(&quot;%d&quot;,&amp;q);
	while(q--){
		scanf(&quot;%d%d&quot;,&amp;n,&amp;k);
		int ans=0;
		for(register int i=1;i&lt;=n;i++){
			scanf(&quot;%d&quot;,&amp;line[i]);
			if(line[i]%2) ans++;
		}
		if((ans&lt;k)||(ans-k)%2){
			printf(&quot;NO\n&quot;);
		}else{
			printf(&quot;YES\n&quot;);
			int pos=1;
			while(k&gt;1){
				if(line[pos]%2){
					printf(&quot;%d &quot;,pos);
					k--;
				}
				pos++;
			}
			printf(&quot;%d\n&quot;,n);
		}
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[题解 codeforces CF1196A Three Piles of Candies]]></title>
        <id>https://GMH2003.github.io/post/2019-07-25-题解-codeforces-CF1196A.markd/</id>
        <link href="https://GMH2003.github.io/post/2019-07-25-题解-codeforces-CF1196A.markd/">
        </link>
        <updated>2019-07-25T22:02:03.000Z</updated>
        <content type="html"><![CDATA[<h2 id="题目链接"><a href="http://codeforces.com/problemset/problem/1196/A">题目链接</a></h2>
<h2 id="题目">题目</h2>
<h2 id="a-three-piles-of-candies">A. Three Piles of Candies</h2>
<ul>
<li>time limit per test1 second</li>
<li>memory limit per test256 megabytes</li>
<li>inputstandard input</li>
<li>outputstandard output</li>
</ul>
<p>Alice and Bob have received three big piles of candies as a gift. Now they want to divide these candies as fair as possible. To do this, Alice takes one pile of candies, then Bob takes one of the other two piles. The last pile is split between Alice and Bob as they want: for example, it is possible that Alice takes the whole pile, and Bob gets nothing from it.</p>
<p>After taking the candies from the piles, if Alice has more candies than Bob, she discards some candies so that the number of candies she has is equal to the number of candies Bob has. Of course, Bob does the same if he has more candies.</p>
<p>Alice and Bob want to have as many candies as possible, and they plan the process of dividing candies accordingly. Please calculate the maximum number of candies Alice can have after this division process (of course, Bob will have the same number of candies).</p>
<p>You have to answer q independent queries.</p>
<p>Let's see the following example: [1,3,4]. Then Alice can choose the third pile, Bob can take the second pile, and then the only candy from the first pile goes to Bob — then Alice has 4 candies, and Bob has 4 candies.</p>
<p>Another example is [1,10,100]. Then Alice can choose the second pile, Bob can choose the first pile, and candies from the third pile can be divided in such a way that Bob takes 54 candies, and Alice takes 46 candies. Now Bob has 55 candies, and Alice has 56 candies, so she has to discard one candy — and after that, she has 55 candies too.</p>
<h3 id="input">Input</h3>
<p>The first line of the input contains one integer q (1≤q≤1000) — the number of queries. Then q queries follow.</p>
<p>The only line of the query contains three integers a,b and c (1≤a,b,c≤1016) — the number of candies in the first, second and third piles correspondingly.</p>
<h3 id="output">Output</h3>
<p>Print q lines. The i-th line should contain the answer for the i-th query — the maximum number of candies Alice can have after the division, if both Alice and Bob act optimally (of course, Bob will have the same number of candies).</p>
<h3 id="example">Example</h3>
<h4 id="input-2">input</h4>
<pre><code>4
1 3 4
1 10 100
10000000000000000 10000000000000000 10000000000000000
23 34 45
</code></pre>
<h4 id="output-2">output</h4>
<pre><code>4
55
15000000000000000
51
</code></pre>
<h2 id="分析及题解">分析及题解</h2>
<h3 id="做题经历">做题经历</h3>
<p>大半夜的看到Alice and Bob，我顿时就懵了。。。。<br>
读完题发现这是一道<s>毒瘤</s>水题。</p>
<h3 id="题目分析">题目分析</h3>
<p>Alice和Bob先把较小的两堆取走，然后去取第三堆，使两人尽可能相等。</p>
<p>综上所述，当三堆加起来为偶数时，除以2输出。当三堆加起来为奇数时，多拿的的那个人(可以是Alice也可以是Bob)要丢掉1，因此也是除以2，输出。</p>
<h3 id="代码附上">代码附上</h3>
<pre><code class="language-cpp">/*by G_M_H*/
#include&lt;cmath&gt;
#include&lt;cstdio&gt;
#include&lt;vector&gt;
#include&lt;cstring&gt;
#include&lt;utility&gt;
#include&lt;iostream&gt;
#include&lt;algorithm&gt;
#define LL long long
using namespace std;
int n;
int main(){
	scanf(&quot;%d&quot;,&amp;n);
	while(n--){
		LL a,b,c;
		scanf(&quot;%lld%lld%lld&quot;,&amp;a,&amp;b,&amp;c);
		printf(&quot;%lld\n&quot;,(a+b+c)/2);
	}
	return 0;
}
</code></pre>
]]></content>
    </entry>
</feed>